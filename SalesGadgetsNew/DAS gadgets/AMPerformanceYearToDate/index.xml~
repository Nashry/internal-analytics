<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="AMPerformanceQtr" height="250" description="sub-productBar">
        <Require feature="pubsub-2">
            <Param name="topics">
                <![CDATA[
                <Topic title="geodata"
                    name="org.wso2.ues.samples2.ch"
                    description="sample channel to demonstrate intergadget communication"
                    type="object"
                    subscribe="true"/>
               ]]>
            </Param>
        </Require>
        <Require feature="dynamic-height"/>
    </ModulePrefs>
    <Content type="html">
        <![CDATA[
        <head>
        <!-- refs-->
            <link rel="stylesheet" href="/portal/css/igviz.css">
            <link rel="stylesheet" href="/portal/css/bootstrap.min.css">
            <link rel="stylesheet" href="/portal/css/charts.css">
            <script src="/portal/js/jquery.min.js"></script>
            <script src="/portal/js/bootstrap.min.js"></script>
            <script src="/portal/js/date.js"></script>
            <script src="/portal/js/d3.min.js"> </script>
            <script src="/portal/js/vega.js"> </script>
            <script src="/portal/js/igviz.js"> </script>
        <!--refs end-->
            <script language="javascript" type="text/javascript" src="/portal/js/jquery-1.10.2.js"></script>
            <script>
 $.post( "http://10.100.4.35:9763/hostedForGadgets/DataOppByCloseDate.jag",{}, function( data ) {
                            //alert("post data : "+data);
                            DrawGraph(data);
                            
            });
function DrawGraph(Data){
var records = JSON.parse(Data);
alert("This is inside the draw graph : "+records);
    var chartData = []; // Holds Opportunity Records for today; Used for Bar charts
    var stageData = []; // Holds Opportunity Records for the day per Stage, per Time bucket; Used for tables;
    var histData = [];  // Holds Historic Opportunity Records; Used for line charts
    var amount = 0;
    var j = 0;
    var k = 0;
    var date = new Date();
    var today = new Date('2015-08-12');

    var recorddate = new Date();
    var firstdayMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    var tmrDate = new Date(date.getFullYear(), date.getMonth()+3, 1);
    var monthNames = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
    
alert("records: "+records);
    for (var i = 0; i < records.length; i++) {
        recorddate = Date.parse(records[i][1]);
        //alert("record date "+records[i][1]);
        //alert(recorddate.toDateString());
        //alert(today.toDateString() == today.toDateString());
        if (recorddate.toDateString() == today.toDateString()) {
            //chartData[j++] = records[i];
            
            date = Date.parse(records[i][2]);
            amount = Math.ceil(Number(records[i][3]));
            if (isNaN(amount)){
                amount=0;
            }
               // alert("just above records[i][8]");
            if (records[i][8] == 1) {
                //alert("This is inside records[i][8] : "+records[i]);
                if (records[i][4] == 1) {
                    monthStr = "Current Month ("+monthNames[today.getMonth()]+")";
                    stageData[k++] = [records[i][11], monthStr, amount, 1, date, records[i][0], records[i][10]];
                }
                if (records[i][6] ==1) {
                    qtrStr = "Current Quarter (Q"+Math.floor((date.getMonth() + 3) / 3)+")";
                    stageData[k++] = [records[i][11], qtrStr, amount, 1, date, records[i][0], records[i][10]];
                }
                if (records[i][7] ==1) {
                    qtrStr = "Next Quarter (Q"+Math.floor((date.getMonth() + 3) / 3)+")";   
                    stageData[k++] = [records[i][11], qtrStr, amount, 1, date, records[i][0], records[i][10]];
                }
                if ((today < date) && (date < tmrDate)) {
                    stageData[k++] = [records[i][11], 'Three Month Rolling', amount, 1, date, records[i][0], records[i][10]];
                }
            }
        }
    }
alert("this is the stage : "+stageData); 
    
    // Drawing Time Bucket Tables
    stageData.sort(function(a,b) { 
            return a[1] > b[1] ? 1 : -1;
        } );
alert("after sorting: "+stageData);
    

    console.log('starting the script');
                  //dataset used to plot charts
    var stages= {
                            "metadata":{
                                "names":["Stage", "Qualifier", "Amount", "Count", "Close Date", "AM"],
                                "types":['C','C','N','N', 'U','C']
                            },
                            "data": stageData 
                        
                    }
    var width=300;
    var height = 270;               

    var oppTimeValConfig = {
        "title": "Opportunity Value per Time Bucket",
        "padding": 60,
        "width": 600,
        "height": 500,
        "rowIndex":0,
        "columnIndex":1,
        "cellIndex":2,
        "aggregate":"sum",
        "chartType": "table",
        "colorBasedStyle": true
    }
    igviz.draw("#oppAmtTime",oppTimeValConfig,stages);

}
            </script>
        <head>
        <body padding="0px">          
            <div id="oppAmtTime" class="col-lg-6" align="left" style="padding:0px;width:300px"></div>
            </body>
        ]]>
    </Content>
</Module>
